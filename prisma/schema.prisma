generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                 String    @id @default(cuid()) // Use cuid for userId
  phoneNo                String    @unique
  name                   String
  zilla                  String
  upazilla               String
  address                String
  referralCode           String?   @unique // Optional
  referredBy             User?     @relation("UserReferredBy", fields: [referredByPhone], references: [phoneNo]) // Self-referencing relationship
  referredByPhone        String? // Stores the phone number of the referrer
  referrals              User[]    @relation("UserReferredBy") // Inverse relation for users referred by this user
  email                  String?   @unique // Optional and unique
  password               String
  isVerified             Boolean   @default(false)
  balance                Decimal   @default(0.0) @db.Decimal(15, 2) // Decimal for balance with precision 10 and scale 2
  shopName               String // Optional
  nomineePhone           String? // Optional
  forgotPasswordSmsCount Int       @default(0) // Tracks the number of forgot password SMS sent
  isLocked               Boolean   @default(false) // Indicates whether the user is locked
  role                   Role      @default(Seller) // Role with a default value
  createdAt              DateTime  @default(now()) // Timestamp for creation
  updatedAt              DateTime  @updatedAt // Timestamp for updates
  version                Int       @default(1) // Version for optimistic concurrency control
  wallets                Wallet[] // Relation with Wallet model
  passwordSendAt         DateTime? // Optional timestamp for when the password was sent

  @@index([phoneNo], name: "userIndex")
  @@map("users") // Optional: Custom table name in the database
}

model Wallet {
  walletId      Int      @id @default(autoincrement()) // Primary key, auto-incremented
  walletName    String // Name of the wallet
  walletPhoneNo String // Associated phone number
  userId        String // Foreign key referencing User
  userName      String // Name of the user
  userPhoneNo   String // Phone number of the user
  user          User     @relation(fields: [userId], references: [userId]) // Relation with User table
  createdAt     DateTime @default(now()) // Timestamp for creation

  @@unique([walletName, walletPhoneNo]) // Composite unique constraint
  @@map("wallets") // Optional: Custom table name in the database
}

model Contact {
  id           String   @id @default(cuid()) // Use cuid for unique id
  phoneNo      String   @unique
  isVerified   Boolean  @default(false)
  isBlocked    Boolean  @default(false)
  totalOTP     Int      @default(0)
  otp          String // Optional
  otpCreatedAt DateTime // Optional, timestamp when OTP was created
  createdAt    DateTime @default(now()) // Timestamp for creation
  updatedAt    DateTime @updatedAt // Timestamp for updates

  @@index([phoneNo], name: "contactIndex")
  @@map("contacts") // Optional: Custom table name in the database
}

model WalletContact {
  id           String    @id @default(cuid()) // Use cuid for unique id
  phoneNo      String    @unique
  isVerified   Boolean   @default(false)
  isBlocked    Boolean   @default(false)
  totalOTP     Int       @default(0)
  otp          String? // Optional
  otpCreatedAt DateTime? // Optional, timestamp when OTP was created
  createdAt    DateTime  @default(now()) // Timestamp for creation
  updatedAt    DateTime  @updatedAt // Timestamp for updates

  @@index([phoneNo], name: "walletContactIndex")
  @@map("wallet_contacts") // Optional: Custom table name in the database
}

model Product {
  productId             Int      @id @default(autoincrement())
  category              String? // Optional field for category
  name                  String
  imageUrl              String
  basePrice             Decimal  @db.Decimal(15, 2) // Integer for base price
  stockSize             Int      @default(0) // Integer for stock size
  isVerifiedProduct     Boolean
  suggestedMaxPrice     Decimal  @db.Decimal(15, 2) // Optional field for suggested max price (integer)
  description           String
  videoUrl              String? // Optional field for video URL
  location              String
  deliveryChargeInside  Decimal  @db.Decimal(15, 2) // Integer for delivery charge inside location
  deliveryChargeOutside Decimal  @db.Decimal(15, 2) // Integer for delivery charge outside location
  published             Boolean
  createdAt             DateTime @default(now()) // Timestamp for creation
  updatedAt             DateTime @updatedAt // Timestamp for updates

  images ProductImage[] // One-to-many relationship with ProductImage
  metas  ProductMeta[] // One-to-many relationship with ProductMeta

  @@map("products") // Optional: Custom table name in the database
}

model ProductReview {
  reviewId    Int      @id @default(autoincrement()) // Auto increment for review ID
  productId   Int // Foreign key to Product table
  sellerId    String // Foreign key to User table (Seller)
  review      String // Text review for the product
  sellerPhone String // Seller's phone number
  sellerName  String // Seller's name
  rating      Int? // Rating for the product (e.g., 1-5 scale)
  createdAt   DateTime @default(now()) // Timestamp for when the review is created
  updatedAt   DateTime @updatedAt // Timestamp for updates to the review

  @@index([productId], name: "productReviewIndex") // Optional index on productId
  @@index([sellerId], name: "sellerReviewIndex") // Optional index on sellerId
  @@map("product_reviews") // Optional: Custom table name in the database
}

model ProductImage {
  imageId   Int      @id @default(autoincrement()) // Unique identifier for the image
  productId Int // Foreign key referencing the Product model
  imageUrl  String // URL of the product image
  createdAt DateTime @default(now()) // Timestamp for creation
  updatedAt DateTime @updatedAt // Timestamp for updates

  // Relation with Product
  product Product @relation(fields: [productId], references: [productId])

  @@index([productId], name: "productImageIndex") // Index on productId for faster queries
  @@map("product_images") // Optional: Custom table name in the database
}

model ProductMeta {
  metaId    Int      @id @default(autoincrement()) // Unique identifier for the meta info
  productId Int // Foreign key referencing the Product model
  key       String // Type of meta info (e.g., "size", "color")
  value     String // Value of the meta info (e.g., "M", "Red")
  createdAt DateTime @default(now()) // Timestamp for creation
  updatedAt DateTime @updatedAt // Timestamp for updates

  // Relation with Product
  product Product @relation(fields: [productId], references: [productId])

  @@unique([productId, key, value], name: "uniqueProductMeta") // Unique constraint for productId, key, and value
  @@index([productId, key], name: "productMetaIndex") // Index for productId and key
  @@map("product_meta") // Optional: Custom table name in the database
}

model Transaction {
  id             Int             @id @default(autoincrement())
  userId         String // Foreign key to User table
  userName       String // Name of the transaction (e.g., "Sell Commission", "Team Commission", etc.)
  userPhoneNo    String // Phone number of the user
  type           TransactionType // credit or debit
  amount         Decimal         @db.Decimal(15, 2) // Amount of the transaction (suitable for financial transactions)
  reason         String // Reason for the transaction (e.g., "Sell Commission", "Team Commission", etc.)
  reference      String? // Reference details for credit transactions (e.g., "Referred Person")
  referralLevel  Int?
  remarks        String?
  paymentMethod  String?
  paymentPhoneNo String?
  transactionId  String?         @unique
  createdAt      DateTime        @default(now())

  @@map("transactions")
}

model Commission {
  id         Int      @id @default(autoincrement())
  startPrice Decimal  @db.Decimal(15, 2)
  endPrice   Decimal? @db.Decimal(15, 2)
  commission Decimal  @db.Decimal(15, 2)
  level      Int
  createdAt  DateTime @default(now())

  @@unique([startPrice, endPrice, level], name: "uniqueCommissionRange")
  @@map("commissions")
}

model WithdrawRequest {
  withdrawId         String         @id @default(uuid())
  userId             String
  userPhoneNo        String
  userName           String
  amount             Decimal        @db.Decimal(15, 2)
  actualAmount       Decimal        @db.Decimal(15, 2)
  transactionFee     Decimal        @db.Decimal(15, 2)
  walletName         String
  walletPhoneNo      String
  transactionId      String?
  transactionPhoneNo String?
  remarks            String? // Optional
  requestedAt        DateTime       @default(now())
  processedAt        DateTime?
  status             WithdrawStatus @default(pending)

  @@map("withdraw_requests")
}

model Order {
  orderId           Int         @id @default(autoincrement())
  orderStatus       OrderStatus @default(pending)
  orderCreatedAt    DateTime    @default(now())
  orderUpdatedAt    DateTime    @updatedAt
  cancelledBySeller Boolean     @default(false)
  remarks           String? // Optional remarks for the order

  sellerId       String
  sellerName     String
  sellerPhoneNo  String
  sellerVerified Boolean
  sellerShopName String
  sellerBalance  Decimal @db.Decimal(15, 2)

  customerName     String
  customerPhoneNo  String
  customerZilla    String
  customerUpazilla String
  deliveryAddress  String
  comments         String?

  courierName String?
  trackingURL String?

  orderProducts OrderProduct[] // One-to-many relationship with OrderProduct

  deliveryCharge               Decimal  @db.Decimal(15, 2)
  isDeliveryChargePaidBySeller Boolean  @default(false)
  deliveryChargePaidBySeller   Decimal? @db.Decimal(15, 2)
  transactionId                String?  @unique
  transactionVerified          Boolean? @default(false)
  sellerWalletName             String?
  sellerWalletPhoneNo          String?
  adminWalletId                Int?
  adminWalletName              String?
  adminWalletPhoneNo           String?

  totalAmount               Decimal  @db.Decimal(15, 2)
  cashOnAmount              Decimal? @db.Decimal(15, 2)
  totalCommission           Decimal  @db.Decimal(15, 2)
  actualCommission          Decimal  @db.Decimal(15, 2)
  totalProductBasePrice     Decimal  @db.Decimal(15, 2)
  totalProductSellingPrice  Decimal  @db.Decimal(15, 2)
  totalProductQuantity      Int
  totalAmountPaidByCustomer Decimal? @db.Decimal(15, 2)

  @@map("orders")
}

model OrderProduct {
  orderProductId           Int     @id @default(autoincrement())
  orderId                  Int
  productId                Int
  productName              String
  productImage             String
  productBasePrice         Decimal @db.Decimal(15, 2)
  productSellingPrice      Decimal @db.Decimal(15, 2)
  productQuantity          Int
  productTotalBasePrice    Decimal @db.Decimal(15, 2)
  productTotalSellingPrice Decimal @db.Decimal(15, 2)
  // selected option is an array of key value pairs
  selectedOptions          Json?

  order Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade) // Foreign key to Order table

  @@map("order_products")
}

model Payment {
  paymentId   Int       @id @default(autoincrement())
  paymentDate DateTime  @default(now())
  processedAt DateTime?

  orderId       Int?
  withdrawId    String?
  paymentStatus PaymentStatus @default(pending)
  paymentType   PaymentType
  sender        Role

  adminWalletId       Int?
  adminWalletName     String
  adminWalletPhoneNo  String
  sellerWalletName    String
  sellerWalletPhoneNo String

  sellerName    String
  sellerPhoneNo String
  sellerId      String

  transactionId  String?  @unique
  amount         Decimal  @db.Decimal(15, 2)
  transactionFee Decimal? @db.Decimal(15, 2)
  actualAmount   Decimal  @db.Decimal(15, 2)

  remarks String? // Optional remarks for the payment

  @@map("payments")
}

model Announcements {
  id            Int      @id @default(autoincrement())
  announcements Json[]   @db.JsonB
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([id])
  @@map("announcements")
}

enum OrderStatus {
  unverified
  pending
  processing
  shipped
  cancelled
  returned
  rejected
  refunded
  completed
  faulty
}

enum WithdrawStatus {
  pending
  completed
  rejected
}

enum Role {
  Admin
  Seller
}

enum TransactionType {
  Credit
  Debit
}

enum PaymentStatus {
  pending
  verified
  rejected
}

enum PaymentType {
  DuePayment
  OrderPayment
  WithdrawPayment
}
